const wayland = @import("wayland.zig");

pub const khronos_int32_t = i32;
pub const khronos_uint32_t = u32;
pub const khronos_int64_t = i64;
pub const khronos_uint64_t = u64;
pub const khronos_int8_t = i8;
pub const khronos_uint8_t = u8;
pub const khronos_int16_t = c_short;
pub const khronos_uint16_t = c_ushort;
pub const khronos_intptr_t = c_long;
pub const khronos_uintptr_t = c_ulong;
pub const khronos_ssize_t = c_long;
pub const khronos_usize_t = c_ulong;
pub const khronos_float_t = f32;
pub const khronos_utime_nanoseconds_t = khronos_uint64_t;
pub const khronos_stime_nanoseconds_t = khronos_int64_t;
pub const khronos_boolean_enum_t = extern enum(c_int) {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647,
    _,
};
pub const EGLNativeDisplayType = ?*c_void;
pub const EGLNativePixmapType = khronos_uintptr_t;
pub const EGLNativeWindowType = khronos_uintptr_t;
pub const NativeDisplayType = EGLNativeDisplayType;
pub const NativePixmapType = EGLNativePixmapType;
pub const NativeWindowType = EGLNativeWindowType;
pub const EGLint = khronos_int32_t;
pub const EGLBoolean = c_uint;
pub const EGLDisplay = ?*c_void;
pub const EGLConfig = ?*c_void;
pub const EGLSurface = ?*c_void;
pub const EGLContext = ?*c_void;
pub const __eglMustCastToProperFunctionPointerType = ?fn () callconv(.C) void;
pub const PFNEGLCHOOSECONFIGPROC = ?fn (EGLDisplay, [*c]const EGLint, [*c]EGLConfig, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCOPYBUFFERSPROC = ?fn (EGLDisplay, EGLSurface, EGLNativePixmapType) callconv(.C) EGLBoolean;
pub const PFNEGLCREATECONTEXTPROC = ?fn (EGLDisplay, EGLConfig, EGLContext, [*c]const EGLint) callconv(.C) EGLContext;
pub const PFNEGLCREATEPBUFFERSURFACEPROC = ?fn (EGLDisplay, EGLConfig, [*c]const EGLint) callconv(.C) EGLSurface;
pub const PFNEGLCREATEPIXMAPSURFACEPROC = ?fn (EGLDisplay, EGLConfig, EGLNativePixmapType, [*c]const EGLint) callconv(.C) EGLSurface;
pub const PFNEGLCREATEWINDOWSURFACEPROC = ?fn (EGLDisplay, EGLConfig, EGLNativeWindowType, [*c]const EGLint) callconv(.C) EGLSurface;
pub const PFNEGLDESTROYCONTEXTPROC = ?fn (EGLDisplay, EGLContext) callconv(.C) EGLBoolean;
pub const PFNEGLDESTROYSURFACEPROC = ?fn (EGLDisplay, EGLSurface) callconv(.C) EGLBoolean;
pub const PFNEGLGETCONFIGATTRIBPROC = ?fn (EGLDisplay, EGLConfig, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLGETCONFIGSPROC = ?fn (EGLDisplay, [*c]EGLConfig, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLGETCURRENTDISPLAYPROC = ?fn () callconv(.C) EGLDisplay;
pub const PFNEGLGETCURRENTSURFACEPROC = ?fn (EGLint) callconv(.C) EGLSurface;
pub const PFNEGLGETDISPLAYPROC = ?fn (EGLNativeDisplayType) callconv(.C) EGLDisplay;
pub const PFNEGLGETERRORPROC = ?fn () callconv(.C) EGLint;
pub const PFNEGLGETPROCADDRESSPROC = ?fn ([*c]const u8) callconv(.C) __eglMustCastToProperFunctionPointerType;
pub const PFNEGLINITIALIZEPROC = ?fn (EGLDisplay, [*c]EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLMAKECURRENTPROC = ?fn (EGLDisplay, EGLSurface, EGLSurface, EGLContext) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYCONTEXTPROC = ?fn (EGLDisplay, EGLContext, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYSTRINGPROC = ?fn (EGLDisplay, EGLint) callconv(.C) [*c]const u8;
pub const PFNEGLQUERYSURFACEPROC = ?fn (EGLDisplay, EGLSurface, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLSWAPBUFFERSPROC = ?fn (EGLDisplay, EGLSurface) callconv(.C) EGLBoolean;
pub const PFNEGLTERMINATEPROC = ?fn (EGLDisplay) callconv(.C) EGLBoolean;
pub const PFNEGLWAITGLPROC = ?fn () callconv(.C) EGLBoolean;
pub const PFNEGLWAITNATIVEPROC = ?fn (EGLint) callconv(.C) EGLBoolean;
pub extern fn eglChooseConfig(dpy: EGLDisplay, attrib_list: [*c]const EGLint, configs: [*c]EGLConfig, config_size: EGLint, num_config: [*c]EGLint) EGLBoolean;
pub extern fn eglCopyBuffers(dpy: EGLDisplay, surface: EGLSurface, target: EGLNativePixmapType) EGLBoolean;
pub extern fn eglCreateContext(dpy: EGLDisplay, config: EGLConfig, share_context: EGLContext, attrib_list: [*c]const EGLint) EGLContext;
pub extern fn eglCreatePbufferSurface(dpy: EGLDisplay, config: EGLConfig, attrib_list: [*c]const EGLint) EGLSurface;
pub extern fn eglCreatePixmapSurface(dpy: EGLDisplay, config: EGLConfig, pixmap: EGLNativePixmapType, attrib_list: [*c]const EGLint) EGLSurface;
pub extern fn eglCreateWindowSurface(dpy: EGLDisplay, config: EGLConfig, win: EGLNativeWindowType, attrib_list: [*c]const EGLint) EGLSurface;
pub extern fn eglDestroyContext(dpy: EGLDisplay, ctx: EGLContext) EGLBoolean;
pub extern fn eglDestroySurface(dpy: EGLDisplay, surface: EGLSurface) EGLBoolean;
pub extern fn eglGetConfigAttrib(dpy: EGLDisplay, config: EGLConfig, attribute: EGLint, value: [*c]EGLint) EGLBoolean;
pub extern fn eglGetConfigs(dpy: EGLDisplay, configs: [*c]EGLConfig, config_size: EGLint, num_config: [*c]EGLint) EGLBoolean;
pub extern fn eglGetCurrentDisplay() EGLDisplay;
pub extern fn eglGetCurrentSurface(readdraw: EGLint) EGLSurface;
pub extern fn eglGetDisplay(display_id: EGLNativeDisplayType) EGLDisplay;
pub extern fn eglGetError() EGLint;
pub extern fn eglGetProcAddress(procname: [*c]const u8) __eglMustCastToProperFunctionPointerType;
pub extern fn eglInitialize(dpy: EGLDisplay, major: [*c]EGLint, minor: [*c]EGLint) EGLBoolean;
pub extern fn eglMakeCurrent(dpy: EGLDisplay, draw: EGLSurface, read: EGLSurface, ctx: EGLContext) EGLBoolean;
pub extern fn eglQueryContext(dpy: EGLDisplay, ctx: EGLContext, attribute: EGLint, value: [*c]EGLint) EGLBoolean;
pub extern fn eglQueryString(dpy: EGLDisplay, name: EGLint) [*c]const u8;
pub extern fn eglQuerySurface(dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: [*c]EGLint) EGLBoolean;
pub extern fn eglSwapBuffers(dpy: EGLDisplay, surface: EGLSurface) EGLBoolean;
pub extern fn eglTerminate(dpy: EGLDisplay) EGLBoolean;
pub extern fn eglWaitGL() EGLBoolean;
pub extern fn eglWaitNative(engine: EGLint) EGLBoolean;
pub const PFNEGLBINDTEXIMAGEPROC = ?fn (EGLDisplay, EGLSurface, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLRELEASETEXIMAGEPROC = ?fn (EGLDisplay, EGLSurface, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLSURFACEATTRIBPROC = ?fn (EGLDisplay, EGLSurface, EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLSWAPINTERVALPROC = ?fn (EGLDisplay, EGLint) callconv(.C) EGLBoolean;
pub extern fn eglBindTexImage(dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) EGLBoolean;
pub extern fn eglReleaseTexImage(dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) EGLBoolean;
pub extern fn eglSurfaceAttrib(dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: EGLint) EGLBoolean;
pub extern fn eglSwapInterval(dpy: EGLDisplay, interval: EGLint) EGLBoolean;
pub const EGLenum = c_uint;
pub const EGLClientBuffer = ?*c_void;
pub const PFNEGLBINDAPIPROC = ?fn (EGLenum) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYAPIPROC = ?fn () callconv(.C) EGLenum;
pub const PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC = ?fn (EGLDisplay, EGLenum, EGLClientBuffer, EGLConfig, [*c]const EGLint) callconv(.C) EGLSurface;
pub const PFNEGLRELEASETHREADPROC = ?fn () callconv(.C) EGLBoolean;
pub const PFNEGLWAITCLIENTPROC = ?fn () callconv(.C) EGLBoolean;
pub extern fn eglBindAPI(api: EGLenum) EGLBoolean;
pub extern fn eglQueryAPI() EGLenum;
pub extern fn eglCreatePbufferFromClientBuffer(dpy: EGLDisplay, buftype: EGLenum, buffer: EGLClientBuffer, config: EGLConfig, attrib_list: [*c]const EGLint) EGLSurface;
pub extern fn eglReleaseThread() EGLBoolean;
pub extern fn eglWaitClient() EGLBoolean;
pub const PFNEGLGETCURRENTCONTEXTPROC = ?fn () callconv(.C) EGLContext;
pub extern fn eglGetCurrentContext() EGLContext;
pub const EGLSync = ?*c_void;
pub const EGLAttrib = isize;
pub const EGLTime = khronos_utime_nanoseconds_t;
pub const EGLImage = ?*c_void;
pub const PFNEGLCREATESYNCPROC = ?fn (EGLDisplay, EGLenum, [*c]const EGLAttrib) callconv(.C) EGLSync;
pub const PFNEGLDESTROYSYNCPROC = ?fn (EGLDisplay, EGLSync) callconv(.C) EGLBoolean;
pub const PFNEGLCLIENTWAITSYNCPROC = ?fn (EGLDisplay, EGLSync, EGLint, EGLTime) callconv(.C) EGLint;
pub const PFNEGLGETSYNCATTRIBPROC = ?fn (EGLDisplay, EGLSync, EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLCREATEIMAGEPROC = ?fn (EGLDisplay, EGLContext, EGLenum, EGLClientBuffer, [*c]const EGLAttrib) callconv(.C) EGLImage;
pub const PFNEGLDESTROYIMAGEPROC = ?fn (EGLDisplay, EGLImage) callconv(.C) EGLBoolean;
pub const PFNEGLGETPLATFORMDISPLAYPROC = ?fn (EGLenum, ?*c_void, [*c]const EGLAttrib) callconv(.C) EGLDisplay;
pub const PFNEGLCREATEPLATFORMWINDOWSURFACEPROC = ?fn (EGLDisplay, EGLConfig, ?*c_void, [*c]const EGLAttrib) callconv(.C) EGLSurface;
pub const PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC = ?fn (EGLDisplay, EGLConfig, ?*c_void, [*c]const EGLAttrib) callconv(.C) EGLSurface;
pub const PFNEGLWAITSYNCPROC = ?fn (EGLDisplay, EGLSync, EGLint) callconv(.C) EGLBoolean;
pub extern fn eglCreateSync(dpy: EGLDisplay, type: EGLenum, attrib_list: [*c]const EGLAttrib) EGLSync;
pub extern fn eglDestroySync(dpy: EGLDisplay, sync: EGLSync) EGLBoolean;
pub extern fn eglClientWaitSync(dpy: EGLDisplay, sync: EGLSync, flags: EGLint, timeout: EGLTime) EGLint;
pub extern fn eglGetSyncAttrib(dpy: EGLDisplay, sync: EGLSync, attribute: EGLint, value: [*c]EGLAttrib) EGLBoolean;
pub extern fn eglCreateImage(dpy: EGLDisplay, ctx: EGLContext, target: EGLenum, buffer: EGLClientBuffer, attrib_list: [*c]const EGLAttrib) EGLImage;
pub extern fn eglDestroyImage(dpy: EGLDisplay, image: EGLImage) EGLBoolean;
pub extern fn eglGetPlatformDisplay(platform: EGLenum, native_display: ?*c_void, attrib_list: [*c]const EGLAttrib) EGLDisplay;
pub extern fn eglCreatePlatformWindowSurface(dpy: EGLDisplay, config: EGLConfig, native_window: ?*c_void, attrib_list: [*c]const EGLAttrib) EGLSurface;
pub extern fn eglCreatePlatformPixmapSurface(dpy: EGLDisplay, config: EGLConfig, native_pixmap: ?*c_void, attrib_list: [*c]const EGLAttrib) EGLSurface;
pub extern fn eglWaitSync(dpy: EGLDisplay, sync: EGLSync, flags: EGLint) EGLBoolean;
pub const EGLSyncKHR = ?*c_void;
pub const EGLAttribKHR = isize;
pub const PFNEGLCREATESYNC64KHRPROC = ?fn (EGLDisplay, EGLenum, [*c]const EGLAttribKHR) callconv(.C) EGLSyncKHR;
pub const EGLLabelKHR = ?*c_void;
pub const EGLObjectKHR = ?*c_void;
pub const EGLDEBUGPROCKHR = ?fn (EGLenum, [*c]const u8, EGLint, EGLLabelKHR, EGLLabelKHR, [*c]const u8) callconv(.C) void;
pub const PFNEGLDEBUGMESSAGECONTROLKHRPROC = ?fn (EGLDEBUGPROCKHR, [*c]const EGLAttrib) callconv(.C) EGLint;
pub const PFNEGLQUERYDEBUGKHRPROC = ?fn (EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLLABELOBJECTKHRPROC = ?fn (EGLDisplay, EGLenum, EGLObjectKHR, EGLLabelKHR) callconv(.C) EGLint;
pub const PFNEGLQUERYDISPLAYATTRIBKHRPROC = ?fn (EGLDisplay, EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const EGLTimeKHR = khronos_utime_nanoseconds_t;
pub const PFNEGLCREATESYNCKHRPROC = ?fn (EGLDisplay, EGLenum, [*c]const EGLint) callconv(.C) EGLSyncKHR;
pub const PFNEGLDESTROYSYNCKHRPROC = ?fn (EGLDisplay, EGLSyncKHR) callconv(.C) EGLBoolean;
pub const PFNEGLCLIENTWAITSYNCKHRPROC = ?fn (EGLDisplay, EGLSyncKHR, EGLint, EGLTimeKHR) callconv(.C) EGLint;
pub const PFNEGLGETSYNCATTRIBKHRPROC = ?fn (EGLDisplay, EGLSyncKHR, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const EGLImageKHR = ?*c_void;
pub const PFNEGLCREATEIMAGEKHRPROC = ?fn (EGLDisplay, EGLContext, EGLenum, EGLClientBuffer, [*c]const EGLint) callconv(.C) EGLImageKHR;
pub const PFNEGLDESTROYIMAGEKHRPROC = ?fn (EGLDisplay, EGLImageKHR) callconv(.C) EGLBoolean;
pub const PFNEGLLOCKSURFACEKHRPROC = ?fn (EGLDisplay, EGLSurface, [*c]const EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLUNLOCKSURFACEKHRPROC = ?fn (EGLDisplay, EGLSurface) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYSURFACE64KHRPROC = ?fn (EGLDisplay, EGLSurface, EGLint, [*c]EGLAttribKHR) callconv(.C) EGLBoolean;
pub const PFNEGLSETDAMAGEREGIONKHRPROC = ?fn (EGLDisplay, EGLSurface, [*c]EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLSIGNALSYNCKHRPROC = ?fn (EGLDisplay, EGLSyncKHR, EGLenum) callconv(.C) EGLBoolean;
pub const EGLStreamKHR = ?*c_void;
pub const EGLuint64KHR = khronos_uint64_t;
pub const PFNEGLCREATESTREAMKHRPROC = ?fn (EGLDisplay, [*c]const EGLint) callconv(.C) EGLStreamKHR;
pub const PFNEGLDESTROYSTREAMKHRPROC = ?fn (EGLDisplay, EGLStreamKHR) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMATTRIBKHRPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYSTREAMKHRPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYSTREAMU64KHRPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, [*c]EGLuint64KHR) callconv(.C) EGLBoolean;
pub const PFNEGLCREATESTREAMATTRIBKHRPROC = ?fn (EGLDisplay, [*c]const EGLAttrib) callconv(.C) EGLStreamKHR;
pub const PFNEGLSETSTREAMATTRIBKHRPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYSTREAMATTRIBKHRPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC = ?fn (EGLDisplay, EGLStreamKHR, [*c]const EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC = ?fn (EGLDisplay, EGLStreamKHR, [*c]const EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC = ?fn (EGLDisplay, EGLStreamKHR) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMCONSUMERACQUIREKHRPROC = ?fn (EGLDisplay, EGLStreamKHR) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMCONSUMERRELEASEKHRPROC = ?fn (EGLDisplay, EGLStreamKHR) callconv(.C) EGLBoolean;
pub const EGLNativeFileDescriptorKHR = c_int;
pub const PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC = ?fn (EGLDisplay, EGLStreamKHR) callconv(.C) EGLNativeFileDescriptorKHR;
pub const PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC = ?fn (EGLDisplay, EGLNativeFileDescriptorKHR) callconv(.C) EGLStreamKHR;
pub const PFNEGLQUERYSTREAMTIMEKHRPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, [*c]EGLTimeKHR) callconv(.C) EGLBoolean;
pub const PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC = ?fn (EGLDisplay, EGLConfig, EGLStreamKHR, [*c]const EGLint) callconv(.C) EGLSurface;
pub const PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC = ?fn (EGLDisplay, EGLSurface, [*c]const EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLWAITSYNCKHRPROC = ?fn (EGLDisplay, EGLSyncKHR, EGLint) callconv(.C) EGLint;
pub const EGLsizeiANDROID = khronos_ssize_t;
pub const EGLSetBlobFuncANDROID = ?fn (?*const c_void, EGLsizeiANDROID, ?*const c_void, EGLsizeiANDROID) callconv(.C) void;
pub const EGLGetBlobFuncANDROID = ?fn (?*const c_void, EGLsizeiANDROID, ?*c_void, EGLsizeiANDROID) callconv(.C) EGLsizeiANDROID;
pub const PFNEGLSETBLOBCACHEFUNCSANDROIDPROC = ?fn (EGLDisplay, EGLSetBlobFuncANDROID, EGLGetBlobFuncANDROID) callconv(.C) void;
pub const PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC = ?fn ([*c]const EGLint) callconv(.C) EGLClientBuffer;
pub const EGLnsecsANDROID = khronos_stime_nanoseconds_t;
pub const PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC = ?fn (EGLDisplay, EGLSurface, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLGETCOMPOSITORTIMINGANDROIDPROC = ?fn (EGLDisplay, EGLSurface, EGLint, [*c]const EGLint, [*c]EGLnsecsANDROID) callconv(.C) EGLBoolean;
pub const PFNEGLGETNEXTFRAMEIDANDROIDPROC = ?fn (EGLDisplay, EGLSurface, [*c]EGLuint64KHR) callconv(.C) EGLBoolean;
pub const PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC = ?fn (EGLDisplay, EGLSurface, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLGETFRAMETIMESTAMPSANDROIDPROC = ?fn (EGLDisplay, EGLSurface, EGLuint64KHR, EGLint, [*c]const EGLint, [*c]EGLnsecsANDROID) callconv(.C) EGLBoolean;
pub const struct_AHardwareBuffer = opaque {};
pub const PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC = ?fn (?*const struct_AHardwareBuffer) callconv(.C) EGLClientBuffer;
pub const PFNEGLDUPNATIVEFENCEFDANDROIDPROC = ?fn (EGLDisplay, EGLSyncKHR) callconv(.C) EGLint;
pub const PFNEGLPRESENTATIONTIMEANDROIDPROC = ?fn (EGLDisplay, EGLSurface, EGLnsecsANDROID) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYSURFACEPOINTERANGLEPROC = ?fn (EGLDisplay, EGLSurface, EGLint, [*c]?*c_void) callconv(.C) EGLBoolean;
pub const PFNEGLCLIENTSIGNALSYNCEXTPROC = ?fn (EGLDisplay, EGLSync, [*c]const EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC = ?fn ([*c]const EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC = ?fn (EGLint, [*c]const EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC = ?fn (EGLint, [*c]const EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC = ?fn (EGLint, [*c]const EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC = ?fn (EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCOMPOSITORSETSIZEEXTPROC = ?fn (EGLint, EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCOMPOSITORSWAPPOLICYEXTPROC = ?fn (EGLint, EGLint) callconv(.C) EGLBoolean;
pub const EGLDeviceEXT = ?*c_void;
pub const PFNEGLQUERYDEVICEATTRIBEXTPROC = ?fn (EGLDeviceEXT, EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYDEVICESTRINGEXTPROC = ?fn (EGLDeviceEXT, EGLint) callconv(.C) [*c]const u8;
pub const PFNEGLQUERYDEVICESEXTPROC = ?fn (EGLint, [*c]EGLDeviceEXT, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYDISPLAYATTRIBEXTPROC = ?fn (EGLDisplay, EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYDMABUFFORMATSEXTPROC = ?fn (EGLDisplay, EGLint, [*c]EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYDMABUFMODIFIERSEXTPROC = ?fn (EGLDisplay, EGLint, EGLint, [*c]EGLuint64KHR, [*c]EGLBoolean, [*c]EGLint) callconv(.C) EGLBoolean;
pub const EGLOutputLayerEXT = ?*c_void;
pub const EGLOutputPortEXT = ?*c_void;
pub const PFNEGLGETOUTPUTLAYERSEXTPROC = ?fn (EGLDisplay, [*c]const EGLAttrib, [*c]EGLOutputLayerEXT, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLGETOUTPUTPORTSEXTPROC = ?fn (EGLDisplay, [*c]const EGLAttrib, [*c]EGLOutputPortEXT, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLOUTPUTLAYERATTRIBEXTPROC = ?fn (EGLDisplay, EGLOutputLayerEXT, EGLint, EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC = ?fn (EGLDisplay, EGLOutputLayerEXT, EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC = ?fn (EGLDisplay, EGLOutputLayerEXT, EGLint) callconv(.C) [*c]const u8;
pub const PFNEGLOUTPUTPORTATTRIBEXTPROC = ?fn (EGLDisplay, EGLOutputPortEXT, EGLint, EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC = ?fn (EGLDisplay, EGLOutputPortEXT, EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC = ?fn (EGLDisplay, EGLOutputPortEXT, EGLint) callconv(.C) [*c]const u8;
pub const PFNEGLGETPLATFORMDISPLAYEXTPROC = ?fn (EGLenum, ?*c_void, [*c]const EGLint) callconv(.C) EGLDisplay;
pub const PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC = ?fn (EGLDisplay, EGLConfig, ?*c_void, [*c]const EGLint) callconv(.C) EGLSurface;
pub const PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC = ?fn (EGLDisplay, EGLConfig, ?*c_void, [*c]const EGLint) callconv(.C) EGLSurface;
pub const PFNEGLSTREAMCONSUMEROUTPUTEXTPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLOutputLayerEXT) callconv(.C) EGLBoolean;
pub const PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC = ?fn (EGLDisplay, EGLSurface, [*c]const EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLUNSIGNALSYNCEXTPROC = ?fn (EGLDisplay, EGLSync, [*c]const EGLAttrib) callconv(.C) EGLBoolean;
pub const struct_EGLClientPixmapHI = extern struct {
    pData: ?*c_void,
    iWidth: EGLint,
    iHeight: EGLint,
    iStride: EGLint,
};
pub const PFNEGLCREATEPIXMAPSURFACEHIPROC = ?fn (EGLDisplay, EGLConfig, [*c]struct_EGLClientPixmapHI) callconv(.C) EGLSurface;
pub const PFNEGLCREATEDRMIMAGEMESAPROC = ?fn (EGLDisplay, [*c]const EGLint) callconv(.C) EGLImageKHR;
pub const PFNEGLEXPORTDRMIMAGEMESAPROC = ?fn (EGLDisplay, EGLImageKHR, [*c]EGLint, [*c]EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC = ?fn (EGLDisplay, EGLImageKHR, [*c]c_int, [*c]c_int, [*c]EGLuint64KHR) callconv(.C) EGLBoolean;
pub const PFNEGLEXPORTDMABUFIMAGEMESAPROC = ?fn (EGLDisplay, EGLImageKHR, [*c]c_int, [*c]EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLGETDISPLAYDRIVERCONFIGPROC = ?fn (EGLDisplay) callconv(.C) [*c]u8;
pub const PFNEGLGETDISPLAYDRIVERNAMEPROC = ?fn (EGLDisplay) callconv(.C) [*c]const u8;
pub const PFNEGLSWAPBUFFERSREGIONNOKPROC = ?fn (EGLDisplay, EGLSurface, EGLint, [*c]const EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLSWAPBUFFERSREGION2NOKPROC = ?fn (EGLDisplay, EGLSurface, EGLint, [*c]const EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYNATIVEDISPLAYNVPROC = ?fn (EGLDisplay, [*c]EGLNativeDisplayType) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYNATIVEWINDOWNVPROC = ?fn (EGLDisplay, EGLSurface, [*c]EGLNativeWindowType) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYNATIVEPIXMAPNVPROC = ?fn (EGLDisplay, EGLSurface, [*c]EGLNativePixmapType) callconv(.C) EGLBoolean;
pub const PFNEGLPOSTSUBBUFFERNVPROC = ?fn (EGLDisplay, EGLSurface, EGLint, EGLint, EGLint, EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC = ?fn (EGLDisplay, EGLStreamKHR, [*c]const EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLSTREAMFLUSHNVPROC = ?fn (EGLDisplay, EGLStreamKHR) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYDISPLAYATTRIBNVPROC = ?fn (EGLDisplay, EGLint, [*c]EGLAttrib) callconv(.C) EGLBoolean;
pub const PFNEGLSETSTREAMMETADATANVPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLint, EGLint, EGLint, ?*const c_void) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYSTREAMMETADATANVPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, EGLint, EGLint, EGLint, ?*c_void) callconv(.C) EGLBoolean;
pub const PFNEGLRESETSTREAMNVPROC = ?fn (EGLDisplay, EGLStreamKHR) callconv(.C) EGLBoolean;
pub const PFNEGLCREATESTREAMSYNCNVPROC = ?fn (EGLDisplay, EGLStreamKHR, EGLenum, [*c]const EGLint) callconv(.C) EGLSyncKHR;
pub const EGLSyncNV = ?*c_void;
pub const EGLTimeNV = khronos_utime_nanoseconds_t;
pub const PFNEGLCREATEFENCESYNCNVPROC = ?fn (EGLDisplay, EGLenum, [*c]const EGLint) callconv(.C) EGLSyncNV;
pub const PFNEGLDESTROYSYNCNVPROC = ?fn (EGLSyncNV) callconv(.C) EGLBoolean;
pub const PFNEGLFENCENVPROC = ?fn (EGLSyncNV) callconv(.C) EGLBoolean;
pub const PFNEGLCLIENTWAITSYNCNVPROC = ?fn (EGLSyncNV, EGLint, EGLTimeNV) callconv(.C) EGLint;
pub const PFNEGLSIGNALSYNCNVPROC = ?fn (EGLSyncNV, EGLenum) callconv(.C) EGLBoolean;
pub const PFNEGLGETSYNCATTRIBNVPROC = ?fn (EGLSyncNV, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const EGLuint64NV = khronos_utime_nanoseconds_t;
pub const PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC = ?fn () callconv(.C) EGLuint64NV;
pub const PFNEGLGETSYSTEMTIMENVPROC = ?fn () callconv(.C) EGLuint64NV;
pub const PFNEGLBINDWAYLANDDISPLAYWLPROC = ?fn (EGLDisplay, ?*wayland.Display) callconv(.C) EGLBoolean;
pub const PFNEGLUNBINDWAYLANDDISPLAYWLPROC = ?fn (EGLDisplay, ?*wayland.Display) callconv(.C) EGLBoolean;
pub const PFNEGLQUERYWAYLANDBUFFERWLPROC = ?fn (EGLDisplay, [*c]wayland.Resource, EGLint, [*c]EGLint) callconv(.C) EGLBoolean;
pub const PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC = ?fn (EGLDisplay, EGLImageKHR) callconv(.C) ?*struct_wl_buffer;
pub const PFNEGLSWAPBUFFERSREGIONNOK = ?fn (EGLDisplay, EGLSurface, EGLint, [*c]const EGLint) callconv(.C) EGLBoolean;

pub const __egl_h_ = 1;
pub const KHRONOS_SUPPORT_INT64 = 1;
pub const KHRONOS_SUPPORT_FLOAT = 1;
pub const KHRONOS_MAX_ENUM = 0x7FFFFFFF;
pub const EGLAPI = KHRONOS_APICALL;
pub const EGLAPIENTRY = KHRONOS_APIENTRY;
pub inline fn EGL_CAST(type_1: anytype, value: anytype) @TypeOf((@import("std").meta.cast(type_1, value))) {
    return (@import("std").meta.cast(type_1, value));
}
pub const EGL_EGL_PROTOTYPES = 1;
pub const EGL_VERSION_1_0 = 1;
pub const EGL_ALPHA_SIZE = 0x3021;
pub const EGL_BAD_ACCESS = 0x3002;
pub const EGL_BAD_ALLOC = 0x3003;
pub const EGL_BAD_ATTRIBUTE = 0x3004;
pub const EGL_BAD_CONFIG = 0x3005;
pub const EGL_BAD_CONTEXT = 0x3006;
pub const EGL_BAD_CURRENT_SURFACE = 0x3007;
pub const EGL_BAD_DISPLAY = 0x3008;
pub const EGL_BAD_MATCH = 0x3009;
pub const EGL_BAD_NATIVE_PIXMAP = 0x300A;
pub const EGL_BAD_NATIVE_WINDOW = 0x300B;
pub const EGL_BAD_PARAMETER = 0x300C;
pub const EGL_BAD_SURFACE = 0x300D;
pub const EGL_BLUE_SIZE = 0x3022;
pub const EGL_BUFFER_SIZE = 0x3020;
pub const EGL_CONFIG_CAVEAT = 0x3027;
pub const EGL_CONFIG_ID = 0x3028;
pub const EGL_CORE_NATIVE_ENGINE = 0x305B;
pub const EGL_DEPTH_SIZE = 0x3025;
pub const EGL_DONT_CARE = EGL_CAST(EGLint, -1);
pub const EGL_DRAW = 0x3059;
pub const EGL_EXTENSIONS = 0x3055;
pub const EGL_FALSE = 0;
pub const EGL_GREEN_SIZE = 0x3023;
pub const EGL_HEIGHT = 0x3056;
pub const EGL_LARGEST_PBUFFER = 0x3058;
pub const EGL_LEVEL = 0x3029;
pub const EGL_MAX_PBUFFER_HEIGHT = 0x302A;
pub const EGL_MAX_PBUFFER_PIXELS = 0x302B;
pub const EGL_MAX_PBUFFER_WIDTH = 0x302C;
pub const EGL_NATIVE_RENDERABLE = 0x302D;
pub const EGL_NATIVE_VISUAL_ID = 0x302E;
pub const EGL_NATIVE_VISUAL_TYPE = 0x302F;
pub const EGL_NONE = 0x3038;
pub const EGL_NON_CONFORMANT_CONFIG = 0x3051;
pub const EGL_NOT_INITIALIZED = 0x3001;
pub const EGL_NO_CONTEXT = EGL_CAST(EGLContext, 0);
pub const EGL_NO_DISPLAY = EGL_CAST(EGLDisplay, 0);
pub const EGL_NO_SURFACE = EGL_CAST(EGLSurface, 0);
pub const EGL_PBUFFER_BIT = 0x0001;
pub const EGL_PIXMAP_BIT = 0x0002;
pub const EGL_READ = 0x305A;
pub const EGL_RED_SIZE = 0x3024;
pub const EGL_SAMPLES = 0x3031;
pub const EGL_SAMPLE_BUFFERS = 0x3032;
pub const EGL_SLOW_CONFIG = 0x3050;
pub const EGL_STENCIL_SIZE = 0x3026;
pub const EGL_SUCCESS = 0x3000;
pub const EGL_SURFACE_TYPE = 0x3033;
pub const EGL_TRANSPARENT_BLUE_VALUE = 0x3035;
pub const EGL_TRANSPARENT_GREEN_VALUE = 0x3036;
pub const EGL_TRANSPARENT_RED_VALUE = 0x3037;
pub const EGL_TRANSPARENT_RGB = 0x3052;
pub const EGL_TRANSPARENT_TYPE = 0x3034;
pub const EGL_TRUE = 1;
pub const EGL_VENDOR = 0x3053;
pub const EGL_VERSION = 0x3054;
pub const EGL_WIDTH = 0x3057;
pub const EGL_WINDOW_BIT = 0x0004;
pub const EGL_VERSION_1_1 = 1;
pub const EGL_BACK_BUFFER = 0x3084;
pub const EGL_BIND_TO_TEXTURE_RGB = 0x3039;
pub const EGL_BIND_TO_TEXTURE_RGBA = 0x303A;
pub const EGL_CONTEXT_LOST = 0x300E;
pub const EGL_MIN_SWAP_INTERVAL = 0x303B;
pub const EGL_MAX_SWAP_INTERVAL = 0x303C;
pub const EGL_MIPMAP_TEXTURE = 0x3082;
pub const EGL_MIPMAP_LEVEL = 0x3083;
pub const EGL_NO_TEXTURE = 0x305C;
pub const EGL_TEXTURE_2D = 0x305F;
pub const EGL_TEXTURE_FORMAT = 0x3080;
pub const EGL_TEXTURE_RGB = 0x305D;
pub const EGL_TEXTURE_RGBA = 0x305E;
pub const EGL_TEXTURE_TARGET = 0x3081;
pub const EGL_VERSION_1_2 = 1;
pub const EGL_ALPHA_FORMAT = 0x3088;
pub const EGL_ALPHA_FORMAT_NONPRE = 0x308B;
pub const EGL_ALPHA_FORMAT_PRE = 0x308C;
pub const EGL_ALPHA_MASK_SIZE = 0x303E;
pub const EGL_BUFFER_PRESERVED = 0x3094;
pub const EGL_BUFFER_DESTROYED = 0x3095;
pub const EGL_CLIENT_APIS = 0x308D;
pub const EGL_COLORSPACE = 0x3087;
pub const EGL_COLORSPACE_sRGB = 0x3089;
pub const EGL_COLORSPACE_LINEAR = 0x308A;
pub const EGL_COLOR_BUFFER_TYPE = 0x303F;
pub const EGL_CONTEXT_CLIENT_TYPE = 0x3097;
pub const EGL_DISPLAY_SCALING = 10000;
pub const EGL_HORIZONTAL_RESOLUTION = 0x3090;
pub const EGL_LUMINANCE_BUFFER = 0x308F;
pub const EGL_LUMINANCE_SIZE = 0x303D;
pub const EGL_OPENGL_ES_BIT = 0x0001;
pub const EGL_OPENVG_BIT = 0x0002;
pub const EGL_OPENGL_ES_API = 0x30A0;
pub const EGL_OPENVG_API = 0x30A1;
pub const EGL_OPENVG_IMAGE = 0x3096;
pub const EGL_PIXEL_ASPECT_RATIO = 0x3092;
pub const EGL_RENDERABLE_TYPE = 0x3040;
pub const EGL_RENDER_BUFFER = 0x3086;
pub const EGL_RGB_BUFFER = 0x308E;
pub const EGL_SINGLE_BUFFER = 0x3085;
pub const EGL_SWAP_BEHAVIOR = 0x3093;
pub const EGL_UNKNOWN = EGL_CAST(EGLint, -1);
pub const EGL_VERTICAL_RESOLUTION = 0x3091;
pub const EGL_VERSION_1_3 = 1;
pub const EGL_CONFORMANT = 0x3042;
pub const EGL_CONTEXT_CLIENT_VERSION = 0x3098;
pub const EGL_MATCH_NATIVE_PIXMAP = 0x3041;
pub const EGL_OPENGL_ES2_BIT = 0x0004;
pub const EGL_VG_ALPHA_FORMAT = 0x3088;
pub const EGL_VG_ALPHA_FORMAT_NONPRE = 0x308B;
pub const EGL_VG_ALPHA_FORMAT_PRE = 0x308C;
pub const EGL_VG_ALPHA_FORMAT_PRE_BIT = 0x0040;
pub const EGL_VG_COLORSPACE = 0x3087;
pub const EGL_VG_COLORSPACE_sRGB = 0x3089;
pub const EGL_VG_COLORSPACE_LINEAR = 0x308A;
pub const EGL_VG_COLORSPACE_LINEAR_BIT = 0x0020;
pub const EGL_VERSION_1_4 = 1;
pub const EGL_DEFAULT_DISPLAY = EGL_CAST(EGLNativeDisplayType, 0);
pub const EGL_MULTISAMPLE_RESOLVE_BOX_BIT = 0x0200;
pub const EGL_MULTISAMPLE_RESOLVE = 0x3099;
pub const EGL_MULTISAMPLE_RESOLVE_DEFAULT = 0x309A;
pub const EGL_MULTISAMPLE_RESOLVE_BOX = 0x309B;
pub const EGL_OPENGL_API = 0x30A2;
pub const EGL_OPENGL_BIT = 0x0008;
pub const EGL_SWAP_BEHAVIOR_PRESERVED_BIT = 0x0400;
pub const EGL_VERSION_1_5 = 1;
pub const EGL_CONTEXT_MAJOR_VERSION = 0x3098;
pub const EGL_CONTEXT_MINOR_VERSION = 0x30FB;
pub const EGL_CONTEXT_OPENGL_PROFILE_MASK = 0x30FD;
pub const EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY = 0x31BD;
pub const EGL_NO_RESET_NOTIFICATION = 0x31BE;
pub const EGL_LOSE_CONTEXT_ON_RESET = 0x31BF;
pub const EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT = 0x00000001;
pub const EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT = 0x00000002;
pub const EGL_CONTEXT_OPENGL_DEBUG = 0x31B0;
pub const EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE = 0x31B1;
pub const EGL_CONTEXT_OPENGL_ROBUST_ACCESS = 0x31B2;
pub const EGL_OPENGL_ES3_BIT = 0x00000040;
pub const EGL_CL_EVENT_HANDLE = 0x309C;
pub const EGL_SYNC_CL_EVENT = 0x30FE;
pub const EGL_SYNC_CL_EVENT_COMPLETE = 0x30FF;
pub const EGL_SYNC_PRIOR_COMMANDS_COMPLETE = 0x30F0;
pub const EGL_SYNC_TYPE = 0x30F7;
pub const EGL_SYNC_STATUS = 0x30F1;
pub const EGL_SYNC_CONDITION = 0x30F8;
pub const EGL_SIGNALED = 0x30F2;
pub const EGL_UNSIGNALED = 0x30F3;
pub const EGL_SYNC_FLUSH_COMMANDS_BIT = 0x0001;
pub const EGL_FOREVER = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const EGL_TIMEOUT_EXPIRED = 0x30F5;
pub const EGL_CONDITION_SATISFIED = 0x30F6;
pub const EGL_NO_SYNC = EGL_CAST(EGLSync, 0);
pub const EGL_SYNC_FENCE = 0x30F9;
pub const EGL_GL_COLORSPACE = 0x309D;
pub const EGL_GL_COLORSPACE_SRGB = 0x3089;
pub const EGL_GL_COLORSPACE_LINEAR = 0x308A;
pub const EGL_GL_RENDERBUFFER = 0x30B9;
pub const EGL_GL_TEXTURE_2D = 0x30B1;
pub const EGL_GL_TEXTURE_LEVEL = 0x30BC;
pub const EGL_GL_TEXTURE_3D = 0x30B2;
pub const EGL_GL_TEXTURE_ZOFFSET = 0x30BD;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x30B3;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x30B4;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x30B5;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x30B6;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x30B7;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x30B8;
pub const EGL_IMAGE_PRESERVED = 0x30D2;
pub const EGL_NO_IMAGE = EGL_CAST(EGLImage, 0);
pub const __eglext_h_ = 1;
pub const EGL_EGLEXT_VERSION = 20200220;
pub const EGL_KHR_cl_event = 1;
pub const EGL_CL_EVENT_HANDLE_KHR = 0x309C;
pub const EGL_SYNC_CL_EVENT_KHR = 0x30FE;
pub const EGL_SYNC_CL_EVENT_COMPLETE_KHR = 0x30FF;
pub const EGL_KHR_cl_event2 = 1;
pub const EGL_KHR_client_get_all_proc_addresses = 1;
pub const EGL_KHR_config_attribs = 1;
pub const EGL_CONFORMANT_KHR = 0x3042;
pub const EGL_VG_COLORSPACE_LINEAR_BIT_KHR = 0x0020;
pub const EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR = 0x0040;
pub const EGL_KHR_context_flush_control = 1;
pub const EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR = 0;
pub const EGL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x2097;
pub const EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x2098;
pub const EGL_KHR_create_context = 1;
pub const EGL_CONTEXT_MAJOR_VERSION_KHR = 0x3098;
pub const EGL_CONTEXT_MINOR_VERSION_KHR = 0x30FB;
pub const EGL_CONTEXT_FLAGS_KHR = 0x30FC;
pub const EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR = 0x30FD;
pub const EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR = 0x31BD;
pub const EGL_NO_RESET_NOTIFICATION_KHR = 0x31BE;
pub const EGL_LOSE_CONTEXT_ON_RESET_KHR = 0x31BF;
pub const EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR = 0x00000001;
pub const EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR = 0x00000002;
pub const EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR = 0x00000004;
pub const EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR = 0x00000001;
pub const EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR = 0x00000002;
pub const EGL_OPENGL_ES3_BIT_KHR = 0x00000040;
pub const EGL_KHR_create_context_no_error = 1;
pub const EGL_CONTEXT_OPENGL_NO_ERROR_KHR = 0x31B3;
pub const EGL_KHR_debug = 1;
pub const EGL_OBJECT_THREAD_KHR = 0x33B0;
pub const EGL_OBJECT_DISPLAY_KHR = 0x33B1;
pub const EGL_OBJECT_CONTEXT_KHR = 0x33B2;
pub const EGL_OBJECT_SURFACE_KHR = 0x33B3;
pub const EGL_OBJECT_IMAGE_KHR = 0x33B4;
pub const EGL_OBJECT_SYNC_KHR = 0x33B5;
pub const EGL_OBJECT_STREAM_KHR = 0x33B6;
pub const EGL_DEBUG_MSG_CRITICAL_KHR = 0x33B9;
pub const EGL_DEBUG_MSG_ERROR_KHR = 0x33BA;
pub const EGL_DEBUG_MSG_WARN_KHR = 0x33BB;
pub const EGL_DEBUG_MSG_INFO_KHR = 0x33BC;
pub const EGL_DEBUG_CALLBACK_KHR = 0x33B8;
pub const EGL_KHR_display_reference = 1;
pub const EGL_TRACK_REFERENCES_KHR = 0x3352;
pub const EGL_KHR_fence_sync = 1;
pub const EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR = 0x30F0;
pub const EGL_SYNC_CONDITION_KHR = 0x30F8;
pub const EGL_SYNC_FENCE_KHR = 0x30F9;
pub const EGL_KHR_get_all_proc_addresses = 1;
pub const EGL_KHR_gl_colorspace = 1;
pub const EGL_GL_COLORSPACE_KHR = 0x309D;
pub const EGL_GL_COLORSPACE_SRGB_KHR = 0x3089;
pub const EGL_GL_COLORSPACE_LINEAR_KHR = 0x308A;
pub const EGL_KHR_gl_renderbuffer_image = 1;
pub const EGL_GL_RENDERBUFFER_KHR = 0x30B9;
pub const EGL_KHR_gl_texture_2D_image = 1;
pub const EGL_GL_TEXTURE_2D_KHR = 0x30B1;
pub const EGL_GL_TEXTURE_LEVEL_KHR = 0x30BC;
pub const EGL_KHR_gl_texture_3D_image = 1;
pub const EGL_GL_TEXTURE_3D_KHR = 0x30B2;
pub const EGL_GL_TEXTURE_ZOFFSET_KHR = 0x30BD;
pub const EGL_KHR_gl_texture_cubemap_image = 1;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR = 0x30B3;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR = 0x30B4;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR = 0x30B5;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR = 0x30B6;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR = 0x30B7;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR = 0x30B8;
pub const EGL_KHR_image = 1;
pub const EGL_NATIVE_PIXMAP_KHR = 0x30B0;
pub const EGL_NO_IMAGE_KHR = EGL_CAST(EGLImageKHR, 0);
pub const EGL_KHR_image_base = 1;
pub const EGL_IMAGE_PRESERVED_KHR = 0x30D2;
pub const EGL_KHR_image_pixmap = 1;
pub const EGL_KHR_lock_surface = 1;
pub const EGL_READ_SURFACE_BIT_KHR = 0x0001;
pub const EGL_WRITE_SURFACE_BIT_KHR = 0x0002;
pub const EGL_LOCK_SURFACE_BIT_KHR = 0x0080;
pub const EGL_OPTIMAL_FORMAT_BIT_KHR = 0x0100;
pub const EGL_MATCH_FORMAT_KHR = 0x3043;
pub const EGL_FORMAT_RGB_565_EXACT_KHR = 0x30C0;
pub const EGL_FORMAT_RGB_565_KHR = 0x30C1;
pub const EGL_FORMAT_RGBA_8888_EXACT_KHR = 0x30C2;
pub const EGL_FORMAT_RGBA_8888_KHR = 0x30C3;
pub const EGL_MAP_PRESERVE_PIXELS_KHR = 0x30C4;
pub const EGL_LOCK_USAGE_HINT_KHR = 0x30C5;
pub const EGL_BITMAP_POINTER_KHR = 0x30C6;
pub const EGL_BITMAP_PITCH_KHR = 0x30C7;
pub const EGL_BITMAP_ORIGIN_KHR = 0x30C8;
pub const EGL_BITMAP_PIXEL_RED_OFFSET_KHR = 0x30C9;
pub const EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR = 0x30CA;
pub const EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR = 0x30CB;
pub const EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR = 0x30CC;
pub const EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR = 0x30CD;
pub const EGL_LOWER_LEFT_KHR = 0x30CE;
pub const EGL_UPPER_LEFT_KHR = 0x30CF;
pub const EGL_KHR_lock_surface2 = 1;
pub const EGL_BITMAP_PIXEL_SIZE_KHR = 0x3110;
pub const EGL_KHR_lock_surface3 = 1;
pub const EGL_KHR_mutable_render_buffer = 1;
pub const EGL_MUTABLE_RENDER_BUFFER_BIT_KHR = 0x1000;
pub const EGL_KHR_no_config_context = 1;
pub const EGL_NO_CONFIG_KHR = EGL_CAST(EGLConfig, 0);
pub const EGL_KHR_partial_update = 1;
pub const EGL_BUFFER_AGE_KHR = 0x313D;
pub const EGL_KHR_platform_android = 1;
pub const EGL_PLATFORM_ANDROID_KHR = 0x3141;
pub const EGL_KHR_platform_gbm = 1;
pub const EGL_PLATFORM_GBM_KHR = 0x31D7;
pub const EGL_KHR_platform_wayland = 1;
pub const EGL_PLATFORM_WAYLAND_KHR = 0x31D8;
pub const EGL_KHR_platform_x11 = 1;
pub const EGL_PLATFORM_X11_KHR = 0x31D5;
pub const EGL_PLATFORM_X11_SCREEN_KHR = 0x31D6;
pub const EGL_KHR_reusable_sync = 1;
pub const EGL_SYNC_STATUS_KHR = 0x30F1;
pub const EGL_SIGNALED_KHR = 0x30F2;
pub const EGL_UNSIGNALED_KHR = 0x30F3;
pub const EGL_TIMEOUT_EXPIRED_KHR = 0x30F5;
pub const EGL_CONDITION_SATISFIED_KHR = 0x30F6;
pub const EGL_SYNC_TYPE_KHR = 0x30F7;
pub const EGL_SYNC_REUSABLE_KHR = 0x30FA;
pub const EGL_SYNC_FLUSH_COMMANDS_BIT_KHR = 0x0001;
pub const EGL_FOREVER_KHR = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const EGL_NO_SYNC_KHR = EGL_CAST(EGLSyncKHR, 0);
pub const EGL_KHR_stream = 1;
pub const EGL_NO_STREAM_KHR = EGL_CAST(EGLStreamKHR, 0);
pub const EGL_CONSUMER_LATENCY_USEC_KHR = 0x3210;
pub const EGL_PRODUCER_FRAME_KHR = 0x3212;
pub const EGL_CONSUMER_FRAME_KHR = 0x3213;
pub const EGL_STREAM_STATE_KHR = 0x3214;
pub const EGL_STREAM_STATE_CREATED_KHR = 0x3215;
pub const EGL_STREAM_STATE_CONNECTING_KHR = 0x3216;
pub const EGL_STREAM_STATE_EMPTY_KHR = 0x3217;
pub const EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR = 0x3218;
pub const EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR = 0x3219;
pub const EGL_STREAM_STATE_DISCONNECTED_KHR = 0x321A;
pub const EGL_BAD_STREAM_KHR = 0x321B;
pub const EGL_BAD_STATE_KHR = 0x321C;
pub const EGL_KHR_stream_attrib = 1;
pub const EGL_KHR_stream_consumer_gltexture = 1;
pub const EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR = 0x321E;
pub const EGL_KHR_stream_cross_process_fd = 1;
pub const EGL_NO_FILE_DESCRIPTOR_KHR = EGL_CAST(EGLNativeFileDescriptorKHR, -1);
pub const EGL_KHR_stream_fifo = 1;
pub const EGL_STREAM_FIFO_LENGTH_KHR = 0x31FC;
pub const EGL_STREAM_TIME_NOW_KHR = 0x31FD;
pub const EGL_STREAM_TIME_CONSUMER_KHR = 0x31FE;
pub const EGL_STREAM_TIME_PRODUCER_KHR = 0x31FF;
pub const EGL_KHR_stream_producer_aldatalocator = 1;
pub const EGL_KHR_stream_producer_eglsurface = 1;
pub const EGL_STREAM_BIT_KHR = 0x0800;
pub const EGL_KHR_surfaceless_context = 1;
pub const EGL_KHR_swap_buffers_with_damage = 1;
pub const EGL_KHR_vg_parent_image = 1;
pub const EGL_VG_PARENT_IMAGE_KHR = 0x30BA;
pub const EGL_KHR_wait_sync = 1;
pub const EGL_ANDROID_GLES_layers = 1;
pub const EGL_ANDROID_blob_cache = 1;
pub const EGL_ANDROID_create_native_client_buffer = 1;
pub const EGL_NATIVE_BUFFER_USAGE_ANDROID = 0x3143;
pub const EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID = 0x00000001;
pub const EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID = 0x00000002;
pub const EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID = 0x00000004;
pub const EGL_ANDROID_framebuffer_target = 1;
pub const EGL_FRAMEBUFFER_TARGET_ANDROID = 0x3147;
pub const EGL_ANDROID_front_buffer_auto_refresh = 1;
pub const EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID = 0x314C;
pub const EGL_ANDROID_get_frame_timestamps = 1;
pub const EGL_TIMESTAMP_PENDING_ANDROID = EGL_CAST(EGLnsecsANDROID, -2);
pub const EGL_TIMESTAMP_INVALID_ANDROID = EGL_CAST(EGLnsecsANDROID, -1);
pub const EGL_TIMESTAMPS_ANDROID = 0x3430;
pub const EGL_COMPOSITE_DEADLINE_ANDROID = 0x3431;
pub const EGL_COMPOSITE_INTERVAL_ANDROID = 0x3432;
pub const EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID = 0x3433;
pub const EGL_REQUESTED_PRESENT_TIME_ANDROID = 0x3434;
pub const EGL_RENDERING_COMPLETE_TIME_ANDROID = 0x3435;
pub const EGL_COMPOSITION_LATCH_TIME_ANDROID = 0x3436;
pub const EGL_FIRST_COMPOSITION_START_TIME_ANDROID = 0x3437;
pub const EGL_LAST_COMPOSITION_START_TIME_ANDROID = 0x3438;
pub const EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID = 0x3439;
pub const EGL_DISPLAY_PRESENT_TIME_ANDROID = 0x343A;
pub const EGL_DEQUEUE_READY_TIME_ANDROID = 0x343B;
pub const EGL_READS_DONE_TIME_ANDROID = 0x343C;
pub const EGL_ANDROID_get_native_client_buffer = 1;
pub const EGL_ANDROID_image_native_buffer = 1;
pub const EGL_NATIVE_BUFFER_ANDROID = 0x3140;
pub const EGL_ANDROID_native_fence_sync = 1;
pub const EGL_SYNC_NATIVE_FENCE_ANDROID = 0x3144;
pub const EGL_SYNC_NATIVE_FENCE_FD_ANDROID = 0x3145;
pub const EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID = 0x3146;
pub const EGL_NO_NATIVE_FENCE_FD_ANDROID = -1;
pub const EGL_ANDROID_presentation_time = 1;
pub const EGL_ANDROID_recordable = 1;
pub const EGL_RECORDABLE_ANDROID = 0x3142;
pub const EGL_ANGLE_d3d_share_handle_client_buffer = 1;
pub const EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE = 0x3200;
pub const EGL_ANGLE_device_d3d = 1;
pub const EGL_D3D9_DEVICE_ANGLE = 0x33A0;
pub const EGL_D3D11_DEVICE_ANGLE = 0x33A1;
pub const EGL_ANGLE_query_surface_pointer = 1;
pub const EGL_ANGLE_surface_d3d_texture_2d_share_handle = 1;
pub const EGL_ANGLE_window_fixed_size = 1;
pub const EGL_FIXED_SIZE_ANGLE = 0x3201;
pub const EGL_ARM_image_format = 1;
pub const EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM = 0x3287;
pub const EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM = 0x3288;
pub const EGL_ARM_implicit_external_sync = 1;
pub const EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM = 0x328A;
pub const EGL_ARM_pixmap_multisample_discard = 1;
pub const EGL_DISCARD_SAMPLES_ARM = 0x3286;
pub const EGL_EXT_bind_to_front = 1;
pub const EGL_FRONT_BUFFER_EXT = 0x3464;
pub const EGL_EXT_buffer_age = 1;
pub const EGL_BUFFER_AGE_EXT = 0x313D;
pub const EGL_EXT_client_extensions = 1;
pub const EGL_EXT_client_sync = 1;
pub const EGL_SYNC_CLIENT_EXT = 0x3364;
pub const EGL_SYNC_CLIENT_SIGNAL_EXT = 0x3365;
pub const EGL_EXT_compositor = 1;
pub const EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT = 0x3460;
pub const EGL_EXTERNAL_REF_ID_EXT = 0x3461;
pub const EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT = 0x3462;
pub const EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT = 0x3463;
pub const EGL_EXT_create_context_robustness = 1;
pub const EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT = 0x30BF;
pub const EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT = 0x3138;
pub const EGL_NO_RESET_NOTIFICATION_EXT = 0x31BE;
pub const EGL_LOSE_CONTEXT_ON_RESET_EXT = 0x31BF;
pub const EGL_EXT_device_base = 1;
pub const EGL_NO_DEVICE_EXT = EGL_CAST(EGLDeviceEXT, 0);
pub const EGL_BAD_DEVICE_EXT = 0x322B;
pub const EGL_DEVICE_EXT = 0x322C;
pub const EGL_EXT_device_drm = 1;
pub const EGL_DRM_DEVICE_FILE_EXT = 0x3233;
pub const EGL_DRM_MASTER_FD_EXT = 0x333C;
pub const EGL_EXT_device_enumeration = 1;
pub const EGL_EXT_device_openwf = 1;
pub const EGL_OPENWF_DEVICE_ID_EXT = 0x3237;
pub const EGL_EXT_device_query = 1;
pub const EGL_EXT_gl_colorspace_bt2020_linear = 1;
pub const EGL_GL_COLORSPACE_BT2020_LINEAR_EXT = 0x333F;
pub const EGL_EXT_gl_colorspace_bt2020_pq = 1;
pub const EGL_GL_COLORSPACE_BT2020_PQ_EXT = 0x3340;
pub const EGL_EXT_gl_colorspace_display_p3 = 1;
pub const EGL_GL_COLORSPACE_DISPLAY_P3_EXT = 0x3363;
pub const EGL_EXT_gl_colorspace_display_p3_linear = 1;
pub const EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT = 0x3362;
pub const EGL_EXT_gl_colorspace_display_p3_passthrough = 1;
pub const EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT = 0x3490;
pub const EGL_EXT_gl_colorspace_scrgb = 1;
pub const EGL_GL_COLORSPACE_SCRGB_EXT = 0x3351;
pub const EGL_EXT_gl_colorspace_scrgb_linear = 1;
pub const EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT = 0x3350;
pub const EGL_EXT_image_dma_buf_import = 1;
pub const EGL_LINUX_DMA_BUF_EXT = 0x3270;
pub const EGL_LINUX_DRM_FOURCC_EXT = 0x3271;
pub const EGL_DMA_BUF_PLANE0_FD_EXT = 0x3272;
pub const EGL_DMA_BUF_PLANE0_OFFSET_EXT = 0x3273;
pub const EGL_DMA_BUF_PLANE0_PITCH_EXT = 0x3274;
pub const EGL_DMA_BUF_PLANE1_FD_EXT = 0x3275;
pub const EGL_DMA_BUF_PLANE1_OFFSET_EXT = 0x3276;
pub const EGL_DMA_BUF_PLANE1_PITCH_EXT = 0x3277;
pub const EGL_DMA_BUF_PLANE2_FD_EXT = 0x3278;
pub const EGL_DMA_BUF_PLANE2_OFFSET_EXT = 0x3279;
pub const EGL_DMA_BUF_PLANE2_PITCH_EXT = 0x327A;
pub const EGL_YUV_COLOR_SPACE_HINT_EXT = 0x327B;
pub const EGL_SAMPLE_RANGE_HINT_EXT = 0x327C;
pub const EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT = 0x327D;
pub const EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT = 0x327E;
pub const EGL_ITU_REC601_EXT = 0x327F;
pub const EGL_ITU_REC709_EXT = 0x3280;
pub const EGL_ITU_REC2020_EXT = 0x3281;
pub const EGL_YUV_FULL_RANGE_EXT = 0x3282;
pub const EGL_YUV_NARROW_RANGE_EXT = 0x3283;
pub const EGL_YUV_CHROMA_SITING_0_EXT = 0x3284;
pub const EGL_YUV_CHROMA_SITING_0_5_EXT = 0x3285;
pub const EGL_EXT_image_dma_buf_import_modifiers = 1;
pub const EGL_DMA_BUF_PLANE3_FD_EXT = 0x3440;
pub const EGL_DMA_BUF_PLANE3_OFFSET_EXT = 0x3441;
pub const EGL_DMA_BUF_PLANE3_PITCH_EXT = 0x3442;
pub const EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT = 0x3443;
pub const EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT = 0x3444;
pub const EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT = 0x3445;
pub const EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT = 0x3446;
pub const EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT = 0x3447;
pub const EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT = 0x3448;
pub const EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT = 0x3449;
pub const EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT = 0x344A;
pub const EGL_EXT_image_gl_colorspace = 1;
pub const EGL_GL_COLORSPACE_DEFAULT_EXT = 0x314D;
pub const EGL_EXT_image_implicit_sync_control = 1;
pub const EGL_IMPORT_SYNC_TYPE_EXT = 0x3470;
pub const EGL_IMPORT_IMPLICIT_SYNC_EXT = 0x3471;
pub const EGL_IMPORT_EXPLICIT_SYNC_EXT = 0x3472;
pub const EGL_EXT_multiview_window = 1;
pub const EGL_MULTIVIEW_VIEW_COUNT_EXT = 0x3134;
pub const EGL_EXT_output_base = 1;
pub const EGL_NO_OUTPUT_LAYER_EXT = EGL_CAST(EGLOutputLayerEXT, 0);
pub const EGL_NO_OUTPUT_PORT_EXT = EGL_CAST(EGLOutputPortEXT, 0);
pub const EGL_BAD_OUTPUT_LAYER_EXT = 0x322D;
pub const EGL_BAD_OUTPUT_PORT_EXT = 0x322E;
pub const EGL_SWAP_INTERVAL_EXT = 0x322F;
pub const EGL_EXT_output_drm = 1;
pub const EGL_DRM_CRTC_EXT = 0x3234;
pub const EGL_DRM_PLANE_EXT = 0x3235;
pub const EGL_DRM_CONNECTOR_EXT = 0x3236;
pub const EGL_EXT_output_openwf = 1;
pub const EGL_OPENWF_PIPELINE_ID_EXT = 0x3238;
pub const EGL_OPENWF_PORT_ID_EXT = 0x3239;
pub const EGL_EXT_pixel_format_float = 1;
pub const EGL_COLOR_COMPONENT_TYPE_EXT = 0x3339;
pub const EGL_COLOR_COMPONENT_TYPE_FIXED_EXT = 0x333A;
pub const EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT = 0x333B;
pub const EGL_EXT_platform_base = 1;
pub const EGL_EXT_platform_device = 1;
pub const EGL_PLATFORM_DEVICE_EXT = 0x313F;
pub const EGL_EXT_platform_wayland = 1;
pub const EGL_PLATFORM_WAYLAND_EXT = 0x31D8;
pub const EGL_EXT_platform_x11 = 1;
pub const EGL_PLATFORM_X11_EXT = 0x31D5;
pub const EGL_PLATFORM_X11_SCREEN_EXT = 0x31D6;
pub const EGL_EXT_protected_content = 1;
pub const EGL_PROTECTED_CONTENT_EXT = 0x32C0;
pub const EGL_EXT_protected_surface = 1;
pub const EGL_EXT_stream_consumer_egloutput = 1;
pub const EGL_EXT_surface_CTA861_3_metadata = 1;
pub const EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT = 0x3360;
pub const EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT = 0x3361;
pub const EGL_EXT_surface_SMPTE2086_metadata = 1;
pub const EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT = 0x3341;
pub const EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT = 0x3342;
pub const EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT = 0x3343;
pub const EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT = 0x3344;
pub const EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT = 0x3345;
pub const EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT = 0x3346;
pub const EGL_SMPTE2086_WHITE_POINT_X_EXT = 0x3347;
pub const EGL_SMPTE2086_WHITE_POINT_Y_EXT = 0x3348;
pub const EGL_SMPTE2086_MAX_LUMINANCE_EXT = 0x3349;
pub const EGL_SMPTE2086_MIN_LUMINANCE_EXT = 0x334A;
pub const EGL_METADATA_SCALING_EXT = 50000;
pub const EGL_EXT_swap_buffers_with_damage = 1;
pub const EGL_EXT_sync_reuse = 1;
pub const EGL_EXT_yuv_surface = 1;
pub const EGL_YUV_ORDER_EXT = 0x3301;
pub const EGL_YUV_NUMBER_OF_PLANES_EXT = 0x3311;
pub const EGL_YUV_SUBSAMPLE_EXT = 0x3312;
pub const EGL_YUV_DEPTH_RANGE_EXT = 0x3317;
pub const EGL_YUV_CSC_STANDARD_EXT = 0x330A;
pub const EGL_YUV_PLANE_BPP_EXT = 0x331A;
pub const EGL_YUV_BUFFER_EXT = 0x3300;
pub const EGL_YUV_ORDER_YUV_EXT = 0x3302;
pub const EGL_YUV_ORDER_YVU_EXT = 0x3303;
pub const EGL_YUV_ORDER_YUYV_EXT = 0x3304;
pub const EGL_YUV_ORDER_UYVY_EXT = 0x3305;
pub const EGL_YUV_ORDER_YVYU_EXT = 0x3306;
pub const EGL_YUV_ORDER_VYUY_EXT = 0x3307;
pub const EGL_YUV_ORDER_AYUV_EXT = 0x3308;
pub const EGL_YUV_SUBSAMPLE_4_2_0_EXT = 0x3313;
pub const EGL_YUV_SUBSAMPLE_4_2_2_EXT = 0x3314;
pub const EGL_YUV_SUBSAMPLE_4_4_4_EXT = 0x3315;
pub const EGL_YUV_DEPTH_RANGE_LIMITED_EXT = 0x3318;
pub const EGL_YUV_DEPTH_RANGE_FULL_EXT = 0x3319;
pub const EGL_YUV_CSC_STANDARD_601_EXT = 0x330B;
pub const EGL_YUV_CSC_STANDARD_709_EXT = 0x330C;
pub const EGL_YUV_CSC_STANDARD_2020_EXT = 0x330D;
pub const EGL_YUV_PLANE_BPP_0_EXT = 0x331B;
pub const EGL_YUV_PLANE_BPP_8_EXT = 0x331C;
pub const EGL_YUV_PLANE_BPP_10_EXT = 0x331D;
pub const EGL_HI_clientpixmap = 1;
pub const EGL_CLIENT_PIXMAP_POINTER_HI = 0x8F74;
pub const EGL_HI_colorformats = 1;
pub const EGL_COLOR_FORMAT_HI = 0x8F70;
pub const EGL_COLOR_RGB_HI = 0x8F71;
pub const EGL_COLOR_RGBA_HI = 0x8F72;
pub const EGL_COLOR_ARGB_HI = 0x8F73;
pub const EGL_IMG_context_priority = 1;
pub const EGL_CONTEXT_PRIORITY_LEVEL_IMG = 0x3100;
pub const EGL_CONTEXT_PRIORITY_HIGH_IMG = 0x3101;
pub const EGL_CONTEXT_PRIORITY_MEDIUM_IMG = 0x3102;
pub const EGL_CONTEXT_PRIORITY_LOW_IMG = 0x3103;
pub const EGL_IMG_image_plane_attribs = 1;
pub const EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG = 0x3105;
pub const EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG = 0x3106;
pub const EGL_MESA_drm_image = 1;
pub const EGL_DRM_BUFFER_FORMAT_MESA = 0x31D0;
pub const EGL_DRM_BUFFER_USE_MESA = 0x31D1;
pub const EGL_DRM_BUFFER_FORMAT_ARGB32_MESA = 0x31D2;
pub const EGL_DRM_BUFFER_MESA = 0x31D3;
pub const EGL_DRM_BUFFER_STRIDE_MESA = 0x31D4;
pub const EGL_DRM_BUFFER_USE_SCANOUT_MESA = 0x00000001;
pub const EGL_DRM_BUFFER_USE_SHARE_MESA = 0x00000002;
pub const EGL_DRM_BUFFER_USE_CURSOR_MESA = 0x00000004;
pub const EGL_MESA_image_dma_buf_export = 1;
pub const EGL_MESA_platform_gbm = 1;
pub const EGL_PLATFORM_GBM_MESA = 0x31D7;
pub const EGL_MESA_platform_surfaceless = 1;
pub const EGL_PLATFORM_SURFACELESS_MESA = 0x31DD;
pub const EGL_MESA_query_driver = 1;
pub const EGL_NOK_swap_region = 1;
pub const EGL_NOK_swap_region2 = 1;
pub const EGL_NOK_texture_from_pixmap = 1;
pub const EGL_Y_INVERTED_NOK = 0x307F;
pub const EGL_NV_3dvision_surface = 1;
pub const EGL_AUTO_STEREO_NV = 0x3136;
pub const EGL_NV_context_priority_realtime = 1;
pub const EGL_CONTEXT_PRIORITY_REALTIME_NV = 0x3357;
pub const EGL_NV_coverage_sample = 1;
pub const EGL_COVERAGE_BUFFERS_NV = 0x30E0;
pub const EGL_COVERAGE_SAMPLES_NV = 0x30E1;
pub const EGL_NV_coverage_sample_resolve = 1;
pub const EGL_COVERAGE_SAMPLE_RESOLVE_NV = 0x3131;
pub const EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV = 0x3132;
pub const EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV = 0x3133;
pub const EGL_NV_cuda_event = 1;
pub const EGL_CUDA_EVENT_HANDLE_NV = 0x323B;
pub const EGL_SYNC_CUDA_EVENT_NV = 0x323C;
pub const EGL_SYNC_CUDA_EVENT_COMPLETE_NV = 0x323D;
pub const EGL_NV_depth_nonlinear = 1;
pub const EGL_DEPTH_ENCODING_NV = 0x30E2;
pub const EGL_DEPTH_ENCODING_NONE_NV = 0;
pub const EGL_DEPTH_ENCODING_NONLINEAR_NV = 0x30E3;
pub const EGL_NV_device_cuda = 1;
pub const EGL_CUDA_DEVICE_NV = 0x323A;
pub const EGL_NV_native_query = 1;
pub const EGL_NV_post_convert_rounding = 1;
pub const EGL_NV_post_sub_buffer = 1;
pub const EGL_POST_SUB_BUFFER_SUPPORTED_NV = 0x30BE;
pub const EGL_NV_quadruple_buffer = 1;
pub const EGL_QUADRUPLE_BUFFER_NV = 0x3231;
pub const EGL_NV_robustness_video_memory_purge = 1;
pub const EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV = 0x334C;
pub const EGL_NV_stream_consumer_gltexture_yuv = 1;
pub const EGL_YUV_PLANE0_TEXTURE_UNIT_NV = 0x332C;
pub const EGL_YUV_PLANE1_TEXTURE_UNIT_NV = 0x332D;
pub const EGL_YUV_PLANE2_TEXTURE_UNIT_NV = 0x332E;
pub const EGL_NV_stream_cross_display = 1;
pub const EGL_STREAM_CROSS_DISPLAY_NV = 0x334E;
pub const EGL_NV_stream_cross_object = 1;
pub const EGL_STREAM_CROSS_OBJECT_NV = 0x334D;
pub const EGL_NV_stream_cross_partition = 1;
pub const EGL_STREAM_CROSS_PARTITION_NV = 0x323F;
pub const EGL_NV_stream_cross_process = 1;
pub const EGL_STREAM_CROSS_PROCESS_NV = 0x3245;
pub const EGL_NV_stream_cross_system = 1;
pub const EGL_STREAM_CROSS_SYSTEM_NV = 0x334F;
pub const EGL_NV_stream_dma = 1;
pub const EGL_STREAM_DMA_NV = 0x3371;
pub const EGL_STREAM_DMA_SERVER_NV = 0x3372;
pub const EGL_NV_stream_fifo_next = 1;
pub const EGL_PENDING_FRAME_NV = 0x3329;
pub const EGL_STREAM_TIME_PENDING_NV = 0x332A;
pub const EGL_NV_stream_fifo_synchronous = 1;
pub const EGL_STREAM_FIFO_SYNCHRONOUS_NV = 0x3336;
pub const EGL_NV_stream_flush = 1;
pub const EGL_NV_stream_frame_limits = 1;
pub const EGL_PRODUCER_MAX_FRAME_HINT_NV = 0x3337;
pub const EGL_CONSUMER_MAX_FRAME_HINT_NV = 0x3338;
pub const EGL_NV_stream_metadata = 1;
pub const EGL_MAX_STREAM_METADATA_BLOCKS_NV = 0x3250;
pub const EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV = 0x3251;
pub const EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV = 0x3252;
pub const EGL_PRODUCER_METADATA_NV = 0x3253;
pub const EGL_CONSUMER_METADATA_NV = 0x3254;
pub const EGL_PENDING_METADATA_NV = 0x3328;
pub const EGL_METADATA0_SIZE_NV = 0x3255;
pub const EGL_METADATA1_SIZE_NV = 0x3256;
pub const EGL_METADATA2_SIZE_NV = 0x3257;
pub const EGL_METADATA3_SIZE_NV = 0x3258;
pub const EGL_METADATA0_TYPE_NV = 0x3259;
pub const EGL_METADATA1_TYPE_NV = 0x325A;
pub const EGL_METADATA2_TYPE_NV = 0x325B;
pub const EGL_METADATA3_TYPE_NV = 0x325C;
pub const EGL_NV_stream_origin = 1;
pub const EGL_STREAM_FRAME_ORIGIN_X_NV = 0x3366;
pub const EGL_STREAM_FRAME_ORIGIN_Y_NV = 0x3367;
pub const EGL_STREAM_FRAME_MAJOR_AXIS_NV = 0x3368;
pub const EGL_CONSUMER_AUTO_ORIENTATION_NV = 0x3369;
pub const EGL_PRODUCER_AUTO_ORIENTATION_NV = 0x336A;
pub const EGL_LEFT_NV = 0x336B;
pub const EGL_RIGHT_NV = 0x336C;
pub const EGL_TOP_NV = 0x336D;
pub const EGL_BOTTOM_NV = 0x336E;
pub const EGL_X_AXIS_NV = 0x336F;
pub const EGL_Y_AXIS_NV = 0x3370;
pub const EGL_NV_stream_remote = 1;
pub const EGL_STREAM_STATE_INITIALIZING_NV = 0x3240;
pub const EGL_STREAM_TYPE_NV = 0x3241;
pub const EGL_STREAM_PROTOCOL_NV = 0x3242;
pub const EGL_STREAM_ENDPOINT_NV = 0x3243;
pub const EGL_STREAM_LOCAL_NV = 0x3244;
pub const EGL_STREAM_PRODUCER_NV = 0x3247;
pub const EGL_STREAM_CONSUMER_NV = 0x3248;
pub const EGL_STREAM_PROTOCOL_FD_NV = 0x3246;
pub const EGL_NV_stream_reset = 1;
pub const EGL_SUPPORT_RESET_NV = 0x3334;
pub const EGL_SUPPORT_REUSE_NV = 0x3335;
pub const EGL_NV_stream_socket = 1;
pub const EGL_STREAM_PROTOCOL_SOCKET_NV = 0x324B;
pub const EGL_SOCKET_HANDLE_NV = 0x324C;
pub const EGL_SOCKET_TYPE_NV = 0x324D;
pub const EGL_NV_stream_socket_inet = 1;
pub const EGL_SOCKET_TYPE_INET_NV = 0x324F;
pub const EGL_NV_stream_socket_unix = 1;
pub const EGL_SOCKET_TYPE_UNIX_NV = 0x324E;
pub const EGL_NV_stream_sync = 1;
pub const EGL_SYNC_NEW_FRAME_NV = 0x321F;
pub const EGL_NV_sync = 1;
pub const EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV = 0x30E6;
pub const EGL_SYNC_STATUS_NV = 0x30E7;
pub const EGL_SIGNALED_NV = 0x30E8;
pub const EGL_UNSIGNALED_NV = 0x30E9;
pub const EGL_SYNC_FLUSH_COMMANDS_BIT_NV = 0x0001;
pub const EGL_FOREVER_NV = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const EGL_ALREADY_SIGNALED_NV = 0x30EA;
pub const EGL_TIMEOUT_EXPIRED_NV = 0x30EB;
pub const EGL_CONDITION_SATISFIED_NV = 0x30EC;
pub const EGL_SYNC_TYPE_NV = 0x30ED;
pub const EGL_SYNC_CONDITION_NV = 0x30EE;
pub const EGL_SYNC_FENCE_NV = 0x30EF;
pub const EGL_NO_SYNC_NV = EGL_CAST(EGLSyncNV, 0);
pub const EGL_NV_system_time = 1;
pub const EGL_NV_triple_buffer = 1;
pub const EGL_TRIPLE_BUFFER_NV = 0x3230;
pub const EGL_TIZEN_image_native_buffer = 1;
pub const EGL_NATIVE_BUFFER_TIZEN = 0x32A0;
pub const EGL_TIZEN_image_native_surface = 1;
pub const EGL_NATIVE_SURFACE_TIZEN = 0x32A1;
pub const EGL_WL_bind_wayland_display = 1;
pub const PFNEGLBINDWAYLANDDISPLAYWL = PFNEGLBINDWAYLANDDISPLAYWLPROC;
pub const PFNEGLUNBINDWAYLANDDISPLAYWL = PFNEGLUNBINDWAYLANDDISPLAYWLPROC;
pub const PFNEGLQUERYWAYLANDBUFFERWL = PFNEGLQUERYWAYLANDBUFFERWLPROC;
pub const EGL_WAYLAND_BUFFER_WL = 0x31D5;
pub const EGL_WAYLAND_PLANE_WL = 0x31D6;
pub const EGL_TEXTURE_Y_U_V_WL = 0x31D7;
pub const EGL_TEXTURE_Y_UV_WL = 0x31D8;
pub const EGL_TEXTURE_Y_XUXV_WL = 0x31D9;
pub const EGL_TEXTURE_EXTERNAL_WL = 0x31DA;
pub const EGL_WAYLAND_Y_INVERTED_WL = 0x31DB;
pub const EGL_WL_create_wayland_buffer_from_image = 1;
pub const PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL = PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC;
pub const EGL_MESA_configless_context = 1;
pub const EGL_NO_CONFIG_MESA = EGL_CAST(EGLConfig, 0);
pub const EGL_MESA_drm_image_formats = 1;
pub const EGL_DRM_BUFFER_FORMAT_ARGB2101010_MESA = 0x3290;
pub const EGL_DRM_BUFFER_FORMAT_ARGB1555_MESA = 0x3291;
pub const EGL_DRM_BUFFER_FORMAT_RGB565_MESA = 0x3292;
